class Solution {
    public int maxEvents(int[][] events) {
        Arrays.sort(events,(a,b)->Integer.compare(a[0],b[0]));
        PriorityQueue<Integer> minHeap=new PriorityQueue<>();
        int count=0;
        int i=0;
        int length=events.length;
        int maxday=0;
        int day=1;
        for(int[] event:events)
        {
            maxday=Math.max(maxday,event[1]);
        }
        while(day<=maxday)
        {
            while(i<length && events[i][0]==day)
            {
                minHeap.offer(events[i][1]);
                i++;
            }
            while(!minHeap.isEmpty() && minHeap.peek()<day)
            {
                minHeap.poll();
            }
            if(!minHeap.isEmpty())
            {
                minHeap.poll();
                count++;
            }
            day++;
        }
        return count;
    }
}
