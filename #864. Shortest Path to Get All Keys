class Solution 
{
    public int shortestPathAllKeys(String[] grid) 
    {
        int r = grid.length;
        int c = grid[0].length();
        boolean[][][] visited = new boolean[r][c][1 << 6];
        Queue<int[]> queue = new LinkedList<>();
        int keys = 0;
        int[][] diff = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        for (int i = 0; i < r; i++)
        {
            for (int j = 0; j < c; j++)
            {
                char ch = grid[i].charAt(j);
                if (ch == '@')
                {
                    queue.add(new int[]{i, j, 0, 0});
                    visited[i][j][0] = true;
                }
                else if (ch >= 'a' && ch <= 'z')
                {
                    keys++;
                }
            }
        }
        while (!queue.isEmpty())
        {
            int[] cell = queue.poll();
            int row = cell[0], col = cell[1], moves = cell[2], flag = cell[3];
            if (flag == ((1 << keys) - 1))
            {
                return moves;
            }
            for (int i = 0; i < 4; i++) 
            {
                int ar = row + diff[i][0];
                int ac = col + diff[i][1];
                if (ar >= 0 && ar < r && ac >= 0 && ac < c) 
                {
                    char ch = grid[ar].charAt(ac);
                    if (ch == '#') 
                    {
                        continue;
                    }
                    if (ch >= 'A' && ch <= 'F') 
                    {
                        if ((flag & (1 << (ch - 'A'))) == 0) 
                        {
                            continue;
                        }
                    }
                    int new_flag = flag;
                    if (ch >= 'a' && ch <= 'f') 
                    {
                        new_flag = new_flag | (1 << (ch - 'a'));
                    }
                    if (!visited[ar][ac][new_flag]) 
                    {
                        queue.add(new int[]{ar, ac, moves + 1, new_flag});
                        visited[ar][ac][new_flag] = true;
                    }
                }
            }
        }
        return -1;
    }
}
